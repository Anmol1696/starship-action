name: "Starship Devnet"
description: "Run mini cosmos ecosystem via devnet"
branding:
  color: blue
  icon: anchor

inputs:
  values:
    description: "Values yaml raw data of filename for helm that define the topology for the devnet"
    required: true
  port-forward:
    description: "Flag weather to perform port forwarding as defined in the values file to local ports (default: true)"
    required: false
    default: "true"
  kubeconfig:
    description: "Kubeconfig file for remote cluster, if set, will be used instead of creating kind cluster"
    required: false
    default: ""
  version:
    description: "Version of devnet chart (default: 0.1.42)"
    required: false
    default: "0.1.42"
  chart:
    description: "Name of  the help chart to use. Recommended: use default (default: starship/devnet)"
    required: false
    default: "starship/devnet"
  repo:
    description: "Helm repo to fetch the chart from (default: https://cosmology-tech.github.io/starship)"
    required: false
    default: "https://cosmology-tech.github.io/starship"
  name:
    description: "Helm chart release name for installing helm chart (default: starship-devnet)"
    required: false
    default: "starship-devnet"
  namespace:
    description: "Kubernetes namespace to deploy helm charts on (default: ci-{github.repository}-{github.workflow}-{github.ref} )"
    required: false
    default: ""

outputs:
  namespace:
    description: "Kubernetes namespace to which helm charts were deployed"
    value: ${{ steps.set-namespace.outputs.namespace }}
  name:
    description: "Helm chart release name for installing helm chart"
    value: ${{ inputs.name }}

runs:
  using: composite
  steps:

    - name: Install dependencies
      run: |
        sudo apt-get install -y make sed wget tar
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
      shell: bash

    - name: Setup helm
      uses: azure/setup-helm@v3
      with:
        version: v3.10.0

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Setup kind cluster
      if: ${{ inputs.kubeconfig == '' }}
      uses: helm/kind-action@v1.4.0
      with:
        cluster_name: kind-starship

    - name: Create kubeconfig file
      if: ${{ inputs.kubeconfig != '' }}
      run: |
        mkdir -p ~/.kube
        echo -e "${{ inputs.kubeconfig }}" > ~/.kube/config
      shell: bash

    - name: Create values.yaml
      run: |
        if [[ "${{ inputs.values }}" == *.yaml || "${{ inputs.values }}" == *.yml ]]
        then
          cp ${{ inputs.values }} ${{ inputs.name }}-values.yaml
        else
          echo -e "${{ inputs.values }}" > ${{ inputs.name }}-values.yaml
        fi
        cat ${{ inputs.name }}-values.yaml
      shell: bash

    - name: Set namespace
      id: set-namespace
      run: |
        namespace="ci-${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}"
        if [ -n "$INPUT_NAMESPACE" ]; then
          namespace="$INPUT_NAMESPACE"
        fi
        namespace="${namespace// /-}"
        namespace="${namespace//\//-}"
        namespace=$(awk '{print tolower($0)}' <<< $namespace)
        (( ${#namespace} > 62 )) && namespace="$(echo $namespace | cut -c1-59)$((RANDOM%1000))"
        namespace=$(echo $namespace | cut -c1-60)
        echo "Setting namespace to $namespace"
        echo "namespace=$namespace" >> $GITHUB_OUTPUT
      shell: bash
      env:
        INPUT_NAMESPACE: ${{ inputs.namespace }}

    - name: Setup starship helm repo
      run: |
        helm version
        helm repo add starship ${{ inputs.repo }}
        helm repo update
        helm search repo starship/devnet
      shell: bash

    - name: Helm delete before install
      run: |
        helm delete ${{ inputs.name }} --debug --namespace ${{ steps.set-namespace.outputs.namespace }} --wait || true
      shell: bash

    - name: Helm install
      run: |
        helm install -f ${{ inputs.name }}-values.yaml ${{ inputs.name }} ${{ inputs.chart }} --wait --debug --version ${{ inputs.version }} --timeout 30m0s --namespace ${{ steps.set-namespace.outputs.namespace }} --create-namespace
      shell: bash

    - name: Port forward
      if: ${{ inputs.port-forward == 'true' }}
      run: ${{ github.action_path }}/port_forward.sh --config=$VALUES_FILE
      shell: bash
      env:
        VALUES_FILE: ${{ inputs.name }}-values.yaml
        NAMESPACE: ${{ steps.set-namespace.outputs.namespace }}
