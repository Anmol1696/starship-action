name: "Starship Devnet"
description: "Run mini cosmos ecosystem via devnet"
branding:
  color: blue
  icon: anchor

inputs:
  values:
    description: "Values yaml raw data of filename for helm that define the topology for the devnet"
    required: true
  version:
    description: "Version of devnet chart (default: v0.2.3)"
    required: false
    default: "v0.2.3"
  cli-version:
    description: "Version of @starship-ci/cli to use: default: 2.3.0"
    required: false
    default: "2.4.0"
  kubeconfig:
    description: "Kubeconfig file for remote cluster, if set, will be used instead of creating kind cluster"
    required: false
    default: ""
  chart:
    description: "Name of  the help chart to use. Recommended: use default (default: starship/devnet)"
    required: false
    default: "starship/devnet"
  repo:
    description: "Helm repo to fetch the chart from (default: https://cosmology-tech.github.io/starship)"
    required: false
    default: "https://cosmology-tech.github.io/starship"
  name:
    description: "Helm chart release name for installing helm chart (default: starship-devnet)"
    required: false
    default: "starship-devnet"
  namespace:
    description: "Kubernetes namespace to deploy helm charts on (default: ci-{github.repository}-{github.workflow}-{github.ref} )"
    required: false
    default: ""

outputs:
  namespace:
    description: "Kubernetes namespace to which helm charts were deployed"
    value: ${{ steps.set-namespace.outputs.namespace }}
  name:
    description: "Helm chart release name for installing helm chart"
    value: ${{ inputs.name }}

runs:
  using: composite
  steps:

    - name: Create yarn.lock and package.json file if not exists
      run: |
        if [ ! -f $GITHUB_WORKSPACE/yarn.lock ]; then
          echo 'Creating temporary yarn.lock file'
          echo '' > $GITHUB_WORKSPACE/yarn.lock
        fi
        if [ ! -f $GITHUB_WORKSPACE/package.json ]; then
          echo 'Creating temporary package.json file'
          echo '{}' > $GITHUB_WORKSPACE/package.json
        fi
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v4
      if: inputs.cli-version != '0.0.0'  # Skip if cli-version is 0.0.0, expected to be used for local testing
      with:
        node-version: "20.x"
        cache: "yarn"

    - name: Setup helm
      uses: azure/setup-helm@v3
      with:
        version: v3.10.0

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.28.0

    - name: Setup kind cluster
      if: ${{ inputs.kubeconfig == '' }}
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: kind-starship

    - name: Create kubeconfig file
      if: ${{ inputs.kubeconfig != '' }}
      run: |
        mkdir -p ~/.kube
        echo -e "${{ inputs.kubeconfig }}" > ~/.kube/config
      shell: bash

    - name: Create values.yaml
      run: |
        if [[ "${{ inputs.values }}" == *.yaml || "${{ inputs.values }}" == *.yml ]]
        then
          cp ${{ inputs.values }} ${{ inputs.name }}-values.yaml
        else
          echo -e "${{ inputs.values }}" > ${{ inputs.name }}-values.yaml
        fi
        cat ${{ inputs.name }}-values.yaml
      shell: bash

    - name: Set namespace
      id: set-namespace
      run: |
        namespace="ci-${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}"
        if [ -n "$INPUT_NAMESPACE" ]; then
          namespace="$INPUT_NAMESPACE"
        fi
        namespace="${namespace// /-}"
        namespace="${namespace//\//-}"
        namespace=$(awk '{print tolower($0)}' <<< $namespace)
        (( ${#namespace} > 62 )) && namespace="$(echo $namespace | cut -c1-59)$((RANDOM%1000))"
        namespace=$(echo $namespace | cut -c1-60)
        echo "Setting namespace to $namespace"
        echo "namespace=$namespace" >> $GITHUB_OUTPUT
      shell: bash
      env:
        INPUT_NAMESPACE: ${{ inputs.namespace }}

    - name: Create namespace if nonexistent
      run: |
        kubectl create namespace ${{ steps.set-namespace.outputs.namespace }} || true
      shell: bash

    - name: Setup starshipjs client
      if: inputs.cli-version != '0.0.0'  # Skip if cli-version is 0.0.0, expected to be used for local testing
      run: |
        yarn add @starship-ci/cli@${{ inputs.cli-version }}
        yarn starship --version
      shell: bash

    - name: Setup starship helm repo
      run: |
        yarn starship setup \
          --helmName ${{ inputs.name }} \
          --helmVersion ${{ inputs.version }} \
          --helmFile $GITHUB_WORKSPACE/${{ inputs.name }}-values.yaml \
          --helmNamespace ${{ steps.set-namespace.outputs.namespace }} \
          --helmChart ${{ inputs.chart }}
      shell: bash

    - name: Helm install
      id: helm-install-1
      continue-on-error: true
      run: |
        helm delete ${{ inputs.name }} --debug --namespace ${{ steps.set-namespace.outputs.namespace }} --wait || true
        sleep 5
        yarn starship start \
          --helmName ${{ inputs.name }} \
          --helmVersion ${{ inputs.version }} \
          --helmFile $GITHUB_WORKSPACE/${{ inputs.name }}-values.yaml \
          --helmNamespace ${{ steps.set-namespace.outputs.namespace }} \
          --helmChart ${{ inputs.chart }}
      shell: bash

    - name: Logs
      if: always()
      run: |
        kubectl get pods -n $NAMESPACE
        for i in `kubectl get po -n $NAMESPACE -o json | jq -r '.items[].metadata.name'`; do
          echo "==================================================="
          echo "Logs for $i"
          kubectl describe pods $i -n $NAMESPACE
          kubectl logs $i -n $NAMESPACE --all-containers --tail=800
          echo "==================================================="
        done
      env:
        VALUES_FILE: ${{ inputs.name }}-values.yaml
        NAMESPACE: ${{ steps.set-namespace.outputs.namespace }}
      shell: bash

    - name: Helm install again
      id: helm-install-2
      if: steps.helm-install-1.outcome == 'failure'
      run: |
        helm delete ${{ inputs.name }} --debug --namespace ${{ steps.set-namespace.outputs.namespace }} --wait || true
        sleep 5
        kubectl get pods --namespace ${{ steps.set-namespace.outputs.namespace }}
        yarn starship start \
          --helmName ${{ inputs.name }} \
          --helmVersion ${{ inputs.version }} \
          --helmFile $GITHUB_WORKSPACE/${{ inputs.name }}-values.yaml \
          --helmNamespace ${{ steps.set-namespace.outputs.namespace }} \
          --helmChart ${{ inputs.chart }}
      shell: bash
